# in this setup, es01 is a master node so it will be responsible for managing and creating indices but won't store the actual shards.

# other nodes will store index shards and will be able to vote. 

# Note: nodes with voting_only and master will not be able to take on master role. we can still send requests even when master is down.
services:
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    environment:
    - node.name=es01
    - cluster.name=my-cluster  
    - xpack.security.enabled=false
    - xpack.security.http.ssl.enabled=false
    - cluster.initial_master_nodes=es01
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"      
    - node.roles=master    
  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    environment:
    - node.name=es02
    - cluster.name=my-cluster 
    - xpack.security.enabled=false
    - xpack.security.http.ssl.enabled=false  
    - cluster.initial_master_nodes=es01
    - discovery.seed_hosts=es01
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"    
    - node.roles=master,data,voting_only   
    ports:
    - 9202:9200 
  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    environment:
    - node.name=es03
    - cluster.name=my-cluster 
    - xpack.security.enabled=false
    - xpack.security.http.ssl.enabled=false
    - cluster.initial_master_nodes=es01
    - discovery.seed_hosts=es01
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    - node.roles=master,data,voting_only
    ports:
    - 9203:9200  
  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.2
    ports:
    - 5601:5601
    environment:
    - ELASTICSEARCH_HOSTS=["http://es01:9200","http://es02:9200","http://es03:9200"]